(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{139:function(a,s,n){"use strict";n.r(s);var e=n(0),t=Object(e.a)({},function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"作用域和闭包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作用域和闭包","aria-hidden":"true"}},[a._v("#")]),a._v(" 作用域和闭包")]),a._v(" "),n("h2",{attrs:{id:"_1-理解词法作用域和动态作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-理解词法作用域和动态作用域","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.理解词法作用域和动态作用域")]),a._v(" "),n("h4",{attrs:{id:"作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作用域","aria-hidden":"true"}},[a._v("#")]),a._v(" 作用域")]),a._v(" "),n("p",[a._v("作用域是指程序源代码中定义变量的区域。")]),a._v(" "),n("p",[a._v("作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。")]),a._v(" "),n("p",[a._v("JavaScript 采用词法作用域(lexical scoping)，也就是静态作用域。")]),a._v(" "),n("h4",{attrs:{id:"静态作用域与动态作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#静态作用域与动态作用域","aria-hidden":"true"}},[a._v("#")]),a._v(" 静态作用域与动态作用域")]),a._v(" "),n("p",[a._v("因为 JavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了。")]),a._v(" "),n("p",[a._v("而与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。")]),a._v(" "),n("p",[a._v("让我们认真看个例子就能明白之间的区别：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var value = 1;\n\nfunction foo() {\n    console.log(value);\n}\n\nfunction bar() {\n    var value = 2;\n    foo();\n}\n\nbar();\n\n// 结果是 ???\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br")])]),n("p",[a._v("假设JavaScript采用静态作用域，让我们分析下执行过程：")]),a._v(" "),n("p",[a._v("执行 foo 函数，先从 foo 函数内部查找是否有局部变量 value，如果没有，就根据书写的位置，查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。")]),a._v(" "),n("p",[a._v("假设JavaScript采用动态作用域，让我们分析下执行过程：")]),a._v(" "),n("p",[a._v("执行 foo 函数，依然是从 foo 函数内部查找是否有局部变量 value。如果没有，就从调用函数的作用域，也就是 bar 函数内部查找 value 变量，所以结果会打印 2。")]),a._v(" "),n("p",[a._v("前面我们已经说了，JavaScript采用的是静态作用域，所以这个例子的结果是 1。")]),a._v(" "),n("h4",{attrs:{id:"动态作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态作用域","aria-hidden":"true"}},[a._v("#")]),a._v(" 动态作用域")]),a._v(" "),n("p",[a._v("也许你会好奇什么语言是动态作用域？")]),a._v(" "),n("p",[a._v("bash 就是动态作用域，不信的话，把下面的脚本存成例如 scope.bash，然后进入相应的目录，用命令行执行 "),n("code",[a._v("bash ./scope.bash")]),a._v("，看看打印的值是多少。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("value=1\nfunction foo () {\n    echo $value;\n}\nfunction bar () {\n    local value=2;\n    foo;\n}\nbar\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br")])]),n("h2",{attrs:{id:"_2-理解javascript的作用域和作用域链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-理解javascript的作用域和作用域链","aria-hidden":"true"}},[a._v("#")]),a._v(" 2.理解"),n("code",[a._v("JavaScript")]),a._v("的作用域和作用域链")]),a._v(" "),n("h3",{attrs:{id:"_1-执行环境（execution-context）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-执行环境（execution-context）","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.执行环境（execution context）")]),a._v(" "),n("p",[a._v("执行环境定义了变量和函数有权访问的其他数据，决定了他们各自的行为。每个执行环境都有与之对应的变量对象（variable object），保存着该环境中定义的所有变量和函数。我们无法通过代码来访问变量对象，但是解析器在处理数据时会在后台使用到它。")]),a._v(" "),n("p",[a._v("执行环境有全局执行环境（也称全局环境）和函数执行环境之分。执行环境如其名是在运行和执行代码的时候才存在的，所以我们运行浏览器的时候会创建全局的执行环境，在调用函数时，会创建函数执行环境。")]),a._v(" "),n("h4",{attrs:{id:"_1-1-全局执行环境"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-全局执行环境","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.1 全局执行环境")]),a._v(" "),n("p",[a._v("全局执行环境是最外围的一个执行环境，在web浏览器中，我们可以认为他是window对象，因此所有的全局变量和函数都是作为window对象的属性和方法创建的。代码载入浏览器时，全局环境被创建，关闭网页或者关闭浏览时全局环境被销毁。")]),a._v(" "),n("h4",{attrs:{id:"_1-2-函数执行环境"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-函数执行环境","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.2 函数执行环境")]),a._v(" "),n("p",[a._v("每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境就被推入一个环境栈中，当函数执行完毕后，栈将其环境弹出，把控制权返回给之前的执行环境。")]),a._v(" "),n("h3",{attrs:{id:"_2-作用域、作用域链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-作用域、作用域链","aria-hidden":"true"}},[a._v("#")]),a._v(" 2.作用域、作用域链")]),a._v(" "),n("h4",{attrs:{id:"_2-1-全局作用域（globe-scope）和局部作用域（local-scope）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-全局作用域（globe-scope）和局部作用域（local-scope）","aria-hidden":"true"}},[a._v("#")]),a._v(" 2.1 全局作用域（globe scope）和局部作用域（local scope）")]),a._v(" "),n("p",[n("strong",[a._v("全局作用域")]),a._v("可以在代码中的任何地方都能被访问，例如：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('1  var name1="haha";\n2 function changName(){\n3     var name2="xixi";\n4     console.log(name1); // haha\n5     console.log(name2);// xixi\n6 } \n7 changName();\n8 console.log(name1);//haha\n9 console.log(name2);//Uncaught ReferenceError: name2 is not defined\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br")])]),n("p",[a._v("其中，name1具有全局作用域，因此在第4行和第8行都会在控制台上输出 haha。name2定义在changName()函数内部，具有局部作用域，因此在第9行，解析器找不到变量name2，抛出错误。\n　　另外，在函数中声明变量时，如果省略 var 操作符，那么声明的变量就是全局变量，拥有全局作用域，但是不推荐这种做法，因为在局部作用域中很难维护定义的全局变量。")]),a._v(" "),n("p",[a._v("再者，window对象的内置属性都拥有全局作用域。")]),a._v(" "),n("p",[n("strong",[a._v("局部作用域")]),a._v("一般只在固定的代码片段内可以访问得到，例如上述代码中的name2，只有在函数内部可以访问得到。")]),a._v(" "),n("h4",{attrs:{id:"_2-2-作用域链（scope-chain）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-作用域链（scope-chain）","aria-hidden":"true"}},[a._v("#")]),a._v(" 2.2 作用域链（scope chain）")]),a._v(" "),n("p",[a._v("全局作用域和局部作用域中变量的访问权限，其实是由作用域链决定的。")]),a._v(" "),n("p",[a._v("每次进入一个新的执行环境，都会创建一个用于搜索变量和函数的作用域链。作用域链是函数被创建的作用域中"),n("strong",[a._v("对象")]),a._v("的集合。作用域链可以保证对执行环境有权访问的所有变量和函数的有序访问。")]),a._v(" "),n("p",[a._v("作用域链的最前端始终是当前执行的代码所在环境的变量对象（如果该环境是函数，则将其活动对象作为变量对象），下一个变量对象来自包含环境（包含当前还行环境的环境），下一个变量对象来自包含环境的包含环境，依次往上，直到全局执行环境的变量对象。全局执行环境的变量对象始终是作用域链中的最后一个对象。")]),a._v(" "),n("p",[a._v("标识符解析是沿着作用域一级一级的向上搜索标识符的过程。搜索过程始终是从作用域的前端逐地向后回溯，直到找到标识符（找不到，就会导致错误发生）。")]),a._v(" "),n("p",[a._v("例如：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v(' 1 var name1 = "haha";\n 2 function changeName(){\n 3     var name2="xixi";\n 4     function swapName(){\n 5         console.log(name1);//haha\n 6         console.log(name2);//xixi\n 7         var tempName=name2;\n 8         name2=name1;\n 9         name1=tempName;\n10         console.log(name1);//xixi11         console.log(name2);//haha\n12         console.log(tempName);//xixi13     }\n14     swapName();\n15     console.log(name1);//haha\n16     console.log(name2);//xixi\n17     //console.log(tempName);抛出错误：Uncaught ReferenceError: tempName is not defined\n18 }\n19 changName();\n20 console.log(name1);\n21 //console.log(name2); 抛出错误：Uncaught ReferenceError: name2 is not defined\n22 //console.log(tempName);抛出错误：Uncaught ReferenceError: tempName is not defined\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br")])]),n("p",[a._v("运行结果如下：")]),a._v(" "),n("p",[n("img",{attrs:{src:"https://images2015.cnblogs.com/blog/1013598/201609/1013598-20160909220825207-770260149.gif",alt:"img"}})]),a._v(" "),n("p",[a._v("上述代码中，一共有三个执行环境：全局环境、changeName()的局部环境和 swapName() 的局部环境。所以，")]),a._v(" "),n("p",[a._v("1.函数 swapName()的作用域链包含三个对象："),n("strong",[a._v("自己的变量对象-----\x3echangeName()局部环境的变量对象 -----\x3e全局环境的变量对象")]),a._v("。")]),a._v(" "),n("p",[a._v("2.函数changeName()的作用域包含两个对象："),n("strong",[a._v("自己的变量对象-----\x3e全局环境的变量对象。")])]),a._v(" "),n("p",[a._v("就上述程序中出现的变量和函数来讲（不考虑隐形变量）：")]),a._v(" "),n("p",[a._v("1.swapName() 局部环境的变量对象中存放变量 tempName；")]),a._v(" "),n("p",[a._v("2.changeName() 局部环境的变量对象中存放变量 name2 和 函数swapName()；")]),a._v(" "),n("p",[a._v("3.全局环境的变量对象中存放变量 name1 、函数changeName();")]),a._v(" "),n("p",[a._v("在swapName()的执行环境中，在执行第5句代码时，解析器沿着函数 swapName()的作用域链一级级向后回溯查找变量 name1，直到在全局环境中找到变量 name1.并输出在控制台上。同样，在执行第6句代码时，解析器沿着函数 swapName()的作用域链一级级向后回溯，在函数changeName()的变量对象中发现变量 name2.通过代码对 name1 和 name2进行交换，并输出在控制台上，根据结果我们发现，这两个变量的值确实交换了。因此我们可以得出结论，"),n("strong",[a._v("函数的局部环境可以访问函数作用域中的变量，也可以访问和操作父环境（包含环境）乃至全局环境中的变量。")])]),a._v(" "),n("p",[n("strong",[a._v("在")]),a._v("changeName() 的执行环境中，执行第15行和第16行代码时，可以正确地输出  name1 和 name2 和两个变量的值（调用了函数swapName(),所以俩变量的值已相互交换），那是因为 name1 在changName()的父环境（全局环境）中， name2 在他自己的局部环境中，即 name1 和 name2 都在其作用域链上。但当执行第17行代码是发生错误 tempName is not defined。因为解析器沿着 函数changeName()的作用域链一级级的查找 变量 tempName时，并不能找到该变量的存在（变量 tempName不在其作用域链上），所以抛出错误。因此，我们可以得出结论："),n("strong",[a._v("父环境只能访问其包含环境和自己环境中的变量和函数，不能访问其子环境中的变量和函数。")])]),a._v(" "),n("p",[a._v("同理，在全局环境中，其变量对象中只存放变量 name1 、函数changeName();  解析器只能访问变量 name1 和函数 changeName(), 而不能访问和操作 函数 changeName() 和函数 swapName() 中定义的变量或者函数。因此，在执行第21行和第22行代码时抛出变量没有定义的错误。所以说，"),n("strong",[a._v("全局环境只能访问全局环境中的变量和函数，不能直接访问局部环境中的任何数据。")])]),a._v(" "),n("p",[a._v("其实，我们可以把作用域链想象成这样（里面的能访问外面的，外面的不能访问里面的，图为参考）：")]),a._v(" "),n("p",[n("img",{attrs:{src:"https://images2015.cnblogs.com/blog/1013598/201609/1013598-20160910103037879-1633973943.gif",alt:"img"}})]),a._v(" "),n("p",[a._v("作用域链相关知识的总结：")]),a._v(" "),n("p",[a._v("1.执行环境决定了变量的生命周期，以及哪部分代码可以访问其中变量")]),a._v(" "),n("p",[a._v("2，执行环境有全局执行环境（全局环境）和局部执行环境之分。")]),a._v(" "),n("p",[a._v("3.每次进入一个新的执行环境，都会创建一个用于搜索变量和函数的作用域链")]),a._v(" "),n("p",[a._v("4.函数的局部环境可以访问函数作用域中的变量和函数，也可以访问其父环境，乃至全局环境中的变量和环境。")]),a._v(" "),n("p",[a._v("5.全局环境只能访问全局环境中定义的变量和函数，不能直接访问局部环境中的任何数据。")]),a._v(" "),n("p",[a._v("6.变量的执行环境有助于确定应该合适释放内存。")]),a._v(" "),n("h3",{attrs:{id:"_3-提升（hoisting）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-提升（hoisting）","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.提升（hoisting）")]),a._v(" "),n("p",[a._v("提升有变量提升和函数提升之分，下面我们依次介绍他们。")]),a._v(" "),n("h4",{attrs:{id:"_3-1-变量提升（variable-hoisting）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-变量提升（variable-hoisting）","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.1 变量提升（variable hoisting）")]),a._v(" "),n("p",[a._v("请看一下代码：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('1  var name="haha";\n2  function changeName(){\n3      console.log(name);\n4      var name="xixi";\n5  }\n6  changeName();\n7  console.log(name);\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br")])]),n("p",[a._v("大家认为第6行和第7行代码输出的结果应该是什么？好了，答案是：输出结果结果分别是 "),n("strong",[a._v("undefined")]),a._v(" 和 "),n("strong",[a._v("haha")]),a._v("。为什么是undefined？ 按照作用域链的思路思考，输出的结果应该是 haha或者xixi啊？ （当然大家都知道 xixi是不可能的，因为解析器在解析第3行代码时，还不知道第4行中的赋值内容）。")]),a._v(" "),n("p",[a._v("那我们先来分析一下代码 函数changeName() 的作用域链： 自己的变量对象 -----\x3e 全局变量对象。解析器在函数执行环境中发现变量 name，因此不会再向全局环境的变量对象中寻找。但是大家要注意的是，解析器在解析第3句代码时，还不知道变量name的值，也就是说只知道有变量name，但是不知道它具体的值（因为还没有执行第4句代码），因此输出是 undefined，第7行输出haha大家应该都理解把（作用域问题）。所以上述代码可以写成下面的形式：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('1   var name="haha";\n2   function changeName(){\n3       var name;\n4       console.log(name);\n5       name="xixi";\n6  }\n7  changeName();\n8  console.log(name);\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br")])]),n("p",[a._v("这个现象就是"),n("strong",[a._v("变量提升")]),a._v("！")]),a._v(" "),n("p",[a._v("变量提升，就是把变量提升到函数的顶部，需要注意的是，变量提升只是提升变量的声明，不会吧变量的值也提升上来！见上述代码，最常见的代码如下，函数example1()和函数example2()是等价的：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v(' 1 function example1(){\n 2     var a="haha";\n 3     var b="xixi";\n 4     var c="heihei";\n 5 }\n 6 \n 7 \n 8 function example2(){\n 9     var a,b,c;\n10     a="haha";\n11     b="xixi";\n12     c="heihei";\n13 }\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br")])]),n("h4",{attrs:{id:"_3-2-函数提升（）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-函数提升（）","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.2 函数提升（）")]),a._v(" "),n("p",[a._v("函数提升就是把函数提升到前面。")]),a._v(" "),n("p",[a._v("在JavaScript中函数的创建方式有三种：函数声明（静态的，像函数example1()的形式）、函数表达式（函数字面量）、函数构造法（动态的，匿名的）。函数表达式的形式如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("1 var func1 = function(n1,n2){\n2     //function body;\n3 };\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])]),n("p",[a._v("函数构造法构造函数的形式如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v(' var func2 = new Function("para1","para2",...,"function body");    \n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("p",[a._v("在这里需要说明的是：只有函数声明形式才能被提升！例如：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('//函数声明\nfunction myTest1(){ \n    func(); \n    function func(){ \n        console.log("我可以被提升"); \n    } \n} \nmyTest1();\n\n//函数表达式\nfunction myTest2(){ \n    func(); \n    var func = function(){ \n        console.log("我不能被提升"); \n    } \n} \nmyTest2();\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br")])]),n("p",[a._v("控制台显示结果如下：")]),a._v(" "),n("p",[n("img",{attrs:{src:"https://images2015.cnblogs.com/blog/1013598/201609/1013598-20160911203525698-779117690.gif",alt:"img"}})]),a._v(" "),n("h2",{attrs:{id:"_3-理解javascript的执行上下文栈，可以应用堆栈信息快速定位问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-理解javascript的执行上下文栈，可以应用堆栈信息快速定位问题","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.理解"),n("code",[a._v("JavaScript")]),a._v("的执行上下文栈，可以应用堆栈信息快速定位问题")]),a._v(" "),n("h3",{attrs:{id:"一、执行上下文（execution-context）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、执行上下文（execution-context）","aria-hidden":"true"}},[a._v("#")]),a._v(" 一、执行上下文（Execution Context）")]),a._v(" "),n("h4",{attrs:{id:"_1-什么是执行上下文"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是执行上下文","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.什么是执行上下文")]),a._v(" "),n("p",[a._v("简而言之，执行上下文就是当前 JavaScript 代码被解析和执行时所在环境的抽象概念， JavaScript 中运行任何的代码都是在执行上下文中运行")]),a._v(" "),n("h4",{attrs:{id:"_2-执行上下文的类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-执行上下文的类型","aria-hidden":"true"}},[a._v("#")]),a._v(" 2.执行上下文的类型")]),a._v(" "),n("p",[a._v("执行上下文总共有三种类型：")]),a._v(" "),n("ul",[n("li",[a._v("全局执行上下文： 这是默认的、最基础的执行上下文。不在任何函数中的代码都位于全局执行上下文中。它做了两件事：1. 创建一个全局对象，在浏览器中这个全局对象就是 window 对象。2. 将 this 指针指向这个全局对象。一个程序中只能存在一个全局执行上下文。")]),a._v(" "),n("li",[a._v("函数执行上下文： 每次调用函数时，都会为该函数创建一个新的执行上下文。每个函数都拥有自己的执行上下文，但是只有在函数被调用的时候才会被创建。一个程序中可以存在任意数量的函数执行上下文。每当一个新的执行上下文被创建，它都会按照特定的顺序执行一系列步骤，具体过程将在本文后面讨论。")]),a._v(" "),n("li",[a._v("Eval 函数执行上下文： 运行在 eval 函数中的代码也获得了自己的执行上下文，但由于 Javascript 开发人员不常用 eval 函数，所以在这里不再讨论。")])]),a._v(" "),n("h3",{attrs:{id:"二、执行上下文的生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、执行上下文的生命周期","aria-hidden":"true"}},[a._v("#")]),a._v(" 二、执行上下文的生命周期")]),a._v(" "),n("p",[a._v("执行上下文的生命周期包括三个阶段："),n("strong",[a._v("创建阶段→执行阶段→回收阶段")]),a._v("，本文重点介绍创建阶段。")]),a._v(" "),n("h4",{attrs:{id:"_1-创建阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建阶段","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.创建阶段")]),a._v(" "),n("p",[a._v("当函数被调用，但未执行任何其内部代码之前，会做以下三件事：")]),a._v(" "),n("ul",[n("li",[a._v("创建变量对象：首先初始化函数的参数arguments，提升函数声明和变量声明。下文会详细说明。")]),a._v(" "),n("li",[a._v("创建作用域链（Scope Chain）：在执行期上下文的创建阶段，作用域链是在变量对象之后创建的。作用域链本身包含变量对象。作用域链用于解析变量。当被要求解析变量时，JavaScript 始终从代码嵌套的最内层开始，如果最内层没有找到变量，就会跳转到上一层父作用域中查找，直到找到该变量。")]),a._v(" "),n("li",[a._v("确定this指向：包括多种情况，下文会详细说明")])]),a._v(" "),n("p",[a._v("在一段 JS 脚本执行之前，要先解析代码（所以说 JS 是解释执行的脚本语言），解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来。变量先暂时赋值为undefined，函数则先声明好可使用。这一步做完了，然后再开始正式执行程序。")]),a._v(" "),n("p",[a._v("另外，一个函数在执行之前，也会创建一个函数执行上下文环境，跟全局上下文差不多，不过 函数执行上下文中会多出this arguments和函数的参数。")]),a._v(" "),n("h4",{attrs:{id:"_2-执行阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-执行阶段","aria-hidden":"true"}},[a._v("#")]),a._v(" 2.执行阶段")]),a._v(" "),n("p",[a._v("执行变量赋值、代码执行")]),a._v(" "),n("h4",{attrs:{id:"_3-回收阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-回收阶段","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.回收阶段")]),a._v(" "),n("p",[a._v("执行上下文出栈等待虚拟机回收执行上下文")]),a._v(" "),n("h3",{attrs:{id:"三、变量提升和this指向的细节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、变量提升和this指向的细节","aria-hidden":"true"}},[a._v("#")]),a._v(" 三、变量提升和this指向的细节")]),a._v(" "),n("h4",{attrs:{id:"_1-变量声明提升"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-变量声明提升","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.变量声明提升")]),a._v(" "),n("p",[a._v("大部分编程语言都是先声明变量再使用，但在JS中，事情有些不一样：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("console.log(a)// undefined\nvar a = 10\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("p",[a._v("上述代码正常输出"),n("code",[a._v("undefined")]),a._v("而不是报错"),n("code",[a._v("Uncaught ReferenceError: a is not defined")]),a._v(",这是因为声明提升（hoisting），相当于如下代码：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var a; //声明 默认值是undefined “准备工作”\nconsole.log(a);\na=10; //赋值\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])]),n("h4",{attrs:{id:"_2-函数声明提升"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数声明提升","aria-hidden":"true"}},[a._v("#")]),a._v(" 2.函数声明提升")]),a._v(" "),n("p",[a._v("我们都知道，创建一个函数的方法有两种，一种是通过函数声明"),n("code",[a._v("function foo(){}")]),a._v("\n另一种是通过函数表达式"),n("code",[a._v("var foo = function(){}")]),a._v(" ,那这两种在函数提升有什么区别呢？")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("console.log(f1) // function f1(){}\nfunction f1() {} // 函数声明\nconsole.log(f2) // undefined\nvar f2 = function() {} // 函数表达式\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("p",[a._v("接下来我们通过一个例子来说明这个问题：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('function test() {\n    foo(); // Uncaught TypeError "foo is not a function"\n    bar(); // "this will run!"\n    var foo = function () { // function expression assigned to local variable \'foo\'\n        alert("this won\'t run!");\n    }\n    function bar() { // function declaration, given the name \'bar\'\n        alert("this will run!");\n    }\n}\ntest();\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br")])]),n("p",[a._v("在上面的例子中，foo()调用的时候报错了，而bar能够正常调用。")]),a._v(" "),n("p",[a._v("我们前面说过变量和函数都会上升，遇到函数表达式 "),n("code",[a._v("var foo = function(){}")]),a._v("时，首先会将"),n("code",[a._v("var foo")]),a._v("上升到函数体顶部，然而此时的foo的值为undefined,所以执行"),n("code",[a._v("foo()")]),a._v("报错。")]),a._v(" "),n("p",[a._v("而对于函数"),n("code",[a._v("bar()")]),a._v(", 则是提升了整个函数，所以"),n("code",[a._v("bar()")]),a._v("才能够顺利执行。")]),a._v(" "),n("p",[a._v("有个细节必须注意："),n("strong",[a._v("当遇到函数和变量同名且都会被提升的情况，函数声明优先级比较高，因此变量声明会被函数声明所覆盖，但是可以重新赋值。")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("alert(a);//输出：function a(){ alert('我是函数') }\nfunction a(){ alert('我是函数') }//\nvar a = '我是变量';\nalert(a);   //输出：'我是变量'\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("p",[a._v("function声明的优先级比var声明高，也就意味着当两个同名变量同时被function和var声明时，function声明会覆盖var声明")]),a._v(" "),n("p",[a._v("这代码等效于：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function a(){alert('我是函数')} \nvar a;    //hoisting\nalert(a);    //输出：function a(){ alert('我是函数') }\na = '我是变量';//赋值\nalert(a);   //输出：'我是变量'\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("p",[a._v("最后我们看个复杂点的例子：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function test(arg){\n    // 1. 形参 arg 是 \"hi\"\n    // 2. 因为函数声明比变量声明优先级高，所以此时 arg 是 function\n    console.log(arg);  \n    var arg = 'hello'; // 3.var arg 变量声明被忽略， arg = 'hello'被执行\n    function arg(){\n    console.log('hello world') \n    }\n    console.log(arg);  \n}\ntest('hi');\n/* 输出：\nfunction arg(){\n    console.log('hello world') \n    }\nhello \n*/\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br")])]),n("p",[a._v("这是因为当函数执行的时候,首先会形成一个新的私有的作用域，然后依次按照如下的步骤执行：")]),a._v(" "),n("ul",[n("li",[a._v("如果有形参，先给形参赋值")]),a._v(" "),n("li",[a._v("进行私有作用域中的预解释，函数声明优先级比变量声明高，最后后者会被前者所覆盖，"),n("strong",[a._v("但是可以重新赋值")])]),a._v(" "),n("li",[a._v("私有作用域中的代码从上到下执行")])]),a._v(" "),n("h4",{attrs:{id:"_3-确定this的指向"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-确定this的指向","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.确定this的指向")]),a._v(" "),n("p",[a._v("先搞明白一个很重要的概念 —— "),n("strong",[a._v("this的值是在执行的时候才能确认，定义的时候不能确认！")]),a._v(" 为什么呢 —— 因为this是执行上下文环境的一部分，而执行上下文需要在代码执行之前确定，而不是定义的时候。看如下例子：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('// 情况1\nfunction foo() {\n  console.log(this.a) //1\n}\nvar a = 1\nfoo()\n\n// 情况2\nfunction fn(){\n  console.log(this);\n}\nvar obj={fn:fn};\nobj.fn(); //this->obj\n\n// 情况3\nfunction CreateJsPerson(name,age){\n//this是当前类的一个实例p1\nthis.name=name; //=>p1.name=name\nthis.age=age; //=>p1.age=age\n}\nvar p1=new CreateJsPerson("尹华芝",48);\n\n// 情况4\nfunction add(c, d){\n  return this.a + this.b + c + d;\n}\nvar o = {a:1, b:3};\nadd.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16\nadd.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34\n\n// 情况5\n<button id="btn1">箭头函数this</button>\n<script type="text/javascript">   \n    let btn1 = document.getElementById(\'btn1\');\n    let obj = {\n        name: \'kobe\',\n        age: 39,\n        getName: function () {\n            btn1.onclick = () => {\n                console.log(this);//obj\n            };\n        }\n    };\n    obj.getName();\n<\/script>\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br"),n("span",{staticClass:"line-number"},[a._v("29")]),n("br"),n("span",{staticClass:"line-number"},[a._v("30")]),n("br"),n("span",{staticClass:"line-number"},[a._v("31")]),n("br"),n("span",{staticClass:"line-number"},[a._v("32")]),n("br"),n("span",{staticClass:"line-number"},[a._v("33")]),n("br"),n("span",{staticClass:"line-number"},[a._v("34")]),n("br"),n("span",{staticClass:"line-number"},[a._v("35")]),n("br"),n("span",{staticClass:"line-number"},[a._v("36")]),n("br"),n("span",{staticClass:"line-number"},[a._v("37")]),n("br"),n("span",{staticClass:"line-number"},[a._v("38")]),n("br"),n("span",{staticClass:"line-number"},[a._v("39")]),n("br"),n("span",{staticClass:"line-number"},[a._v("40")]),n("br"),n("span",{staticClass:"line-number"},[a._v("41")]),n("br"),n("span",{staticClass:"line-number"},[a._v("42")]),n("br"),n("span",{staticClass:"line-number"},[a._v("43")]),n("br"),n("span",{staticClass:"line-number"},[a._v("44")]),n("br"),n("span",{staticClass:"line-number"},[a._v("45")]),n("br")])]),n("p",[a._v("接下来我们逐一解释上面几种情况")]),a._v(" "),n("ul",[n("li",[a._v("对于直接调用 foo 来说，不管 foo 函数被放在了什么地方，this 一定是 window")]),a._v(" "),n("li",[a._v("对于 obj.foo() 来说，我们只需要记住，谁调用了函数，谁就是 this，所以在这个场景下 foo 函数中的 this 就是 obj 对象")]),a._v(" "),n("li",[a._v("在构造函数模式中，类中(函数体中)出现的this.xxx=xxx中的this是当前类的一个实例")]),a._v(" "),n("li",[a._v("call、apply和bind：this 是第一个参数")]),a._v(" "),n("li",[a._v("箭头函数this指向:箭头函数没有自己的this，看其外层的是否有函数，如果有，外层函数的this就是内部箭头函数的this，如果没有，则this是window。")])]),a._v(" "),n("p",[n("img",{attrs:{src:"https://segmentfault.com/img/remote/1460000018550121?w=602&h=426",alt:"img"}})]),a._v(" "),n("h4",{attrs:{id:"四、执行上下文栈（execution-context-stack）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、执行上下文栈（execution-context-stack）","aria-hidden":"true"}},[a._v("#")]),a._v(" 四、执行上下文栈（Execution Context Stack）")]),a._v(" "),n("p",[a._v("函数多了，就有多个函数执行上下文，每次调用函数创建一个新的执行上下文，那如何管理创建的那么多执行上下文呢？")]),a._v(" "),n("p",[a._v("JavaScript 引擎创建了执行上下文栈来管理执行上下文。"),n("strong",[a._v("可以把执行上下文栈认为是一个存储函数调用的栈结构，遵循先进后出的原则")]),a._v("。")]),a._v(" "),n("p",[n("img",{attrs:{src:"https://segmentfault.com/img/remote/1460000018550122?w=486&h=238",alt:"img"}})]),a._v(" "),n("p",[a._v("从上面的流程图，我们需要记住几个关键点：")]),a._v(" "),n("ul",[n("li",[a._v("JavaScript执行在单线程上，所有的代码都是排队执行。")]),a._v(" "),n("li",[a._v("一开始浏览器执行全局的代码时，首先创建全局的执行上下文，压入执行栈的顶部。")]),a._v(" "),n("li",[a._v("每当进入一个函数的执行就会创建函数的执行上下文，并且把它压入执行栈的顶部。当前函数执行完成后，当前函数的执行上下文出栈，并等待垃圾回收。")]),a._v(" "),n("li",[a._v("浏览器的JS执行引擎总是访问栈顶的执行上下文。")]),a._v(" "),n("li",[a._v("全局上下文只有唯一的一个，它在浏览器关闭时出栈。")])]),a._v(" "),n("p",[a._v("我们再来看个例子：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var color = 'blue';\nfunction changeColor() {\n    var anotherColor = 'red';\n    function swapColors() {\n        var tempColor = anotherColor;\n        anotherColor = color;\n        color = tempColor;\n    }\n    swapColors();\n}\nchangeColor();\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br")])]),n("p",[a._v("上述代码运行按照如下步骤：")]),a._v(" "),n("ul",[n("li",[a._v("当上述代码在浏览器中加载时，JavaScript 引擎会创建一个全局执行上下文并且将它推入当前的执行栈")]),a._v(" "),n("li",[a._v("调用 changeColor函数时，此时changeColor函数内部代码还未执行，js执行引擎立即创建一个changeColor的执行上下文（简称EC），然后把这执行上下文压入到执行栈（简称ECStack）中。")]),a._v(" "),n("li",[a._v("执行changeColor函数过程中，调用swapColors函数，同样地，swapColors函数执行之前也创建了一个swapColors的执行上下文，并压入到执行栈中。")]),a._v(" "),n("li",[a._v("swapColors函数执行完成，swapColors函数的执行上下文出栈，并且被销毁。")]),a._v(" "),n("li",[a._v("changeColor函数执行完成，changeColor函数的执行上下文出栈，并且被销毁。")])]),a._v(" "),n("p",[n("img",{attrs:{src:"https://segmentfault.com/img/remote/1460000018550123?w=1180&h=320",alt:"img"}})]),a._v(" "),n("h2",{attrs:{id:"_4-this的原理以及几种不同使用场景的取值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-this的原理以及几种不同使用场景的取值","aria-hidden":"true"}},[a._v("#")]),a._v(" 4."),n("code",[a._v("this")]),a._v("的原理以及几种不同使用场景的取值")]),a._v(" "),n("h4",{attrs:{id:"情况一：全局-调用普通函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#情况一：全局-调用普通函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 情况一：全局 & 调用普通函数")]),a._v(" "),n("p",[a._v("在全局环境中，this 永远指向 window。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("console.log(this === window);     //true\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("p",[a._v("普通函数在调用时候(注意不是构造函数，前面不加 new)，其中的 this 也是指向 window。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var x = 10;\nfunction foo(){\n    console.log(this);     //Window\n    console.log(this.x);   //10\n}\nfoo();\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br")])]),n("h4",{attrs:{id:"情况二：构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#情况二：构造函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 情况二：构造函数")]),a._v(" "),n("p",[a._v("所谓的构造函数就是由一个函数 new 出来的对象，一般构造函数的函数名首字母大写，例如像 Object，Function，Array 这些都属于构造函数。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function Foo(){\n    this.x = 10;\n    console.log(this);    //Foo {x:10}\n}\nvar foo = new Foo();\nconsole.log(foo.x);      //10\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br")])]),n("p",[a._v("上述代码，如果函数作为构造函数使用，那么其中的 this 就代表它即将 new 出来的对象。")]),a._v(" "),n("p",[a._v("但是如果直接调用 Foo 函数，而不是 new Foo()，那就变成情况1，这时候 Foo() 就变成普通函数。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function Foo(){\n    this.x = 10;\n    console.log(this);    //Window\n}\nvar foo = Foo();\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("h4",{attrs:{id:"情况三：对象方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#情况三：对象方法","aria-hidden":"true"}},[a._v("#")]),a._v(" 情况三：对象方法")]),a._v(" "),n("p",[a._v("如果函数作为对象的方法时，方法中的 this 指向该对象。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var obj = {\n    x: 10,\n    foo: function () {\n        console.log(this);        //Object\n        console.log(this.x);      //10\n    }\n};\nobj.foo();\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br")])]),n("p",[a._v("注意：若是在对象方法中定义函数，那么情况就不同了。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var obj = {\n    x: 10,\n    foo: function () {\n        function f(){\n            console.log(this);      //Window\n            console.log(this.x);    //undefined\n        }\n        f();\n    }\n}\nobj.foo();\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br")])]),n("p",[a._v("可以这么理解：函数 f 虽然是在 obj.foo 内部定义的，但它仍然属于一个普通函数，this 仍指向 window。")]),a._v(" "),n("p",[a._v("在这里，如果想要调用上层作用域中的变量 obj.x，可以使用 self 缓存外部 this 变量。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var obj = {\n    x: 10,\n    foo: function () {\n        var self = this;\n        function f(){\n            console.log(self);      //{x: 10}\n            console.log(self.x);    //10\n        }\n        f();\n    }\n}\nobj.foo();\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br")])]),n("p",[a._v("如果 foo 函数不作为对象方法被调用：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var obj = {\n    x: 10,\n    foo: function () {\n        console.log(this);       //Window\n        console.log(this.x);     //undefined\n    }\n};\nvar fn = obj.foo;\nfn();\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br")])]),n("p",[a._v("obj.foo 被赋值给一个全局变量，并没有作为 obj 的一个属性被调用，那么此时 this 的值是 window。")]),a._v(" "),n("h4",{attrs:{id:"情况四：构造函数-prototype-属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#情况四：构造函数-prototype-属性","aria-hidden":"true"}},[a._v("#")]),a._v(" 情况四：构造函数 prototype 属性")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function Foo(){\n    this.x = 10;\n}\nFoo.prototype.getX = function () {\n    console.log(this);        //Foo {x: 10, getX: function}\n    console.log(this.x);      //10\n}\nvar foo = new Foo();\nfoo.getX();\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br")])]),n("p",[a._v("在 Foo.prototype.getX 函数中，this 指向的 foo 对象。不仅仅如此，即便是在整个原型链中，this 代表的也是当前对象的值。")]),a._v(" "),n("h4",{attrs:{id:"情况五：函数用-call、apply或者-bind-调用。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#情况五：函数用-call、apply或者-bind-调用。","aria-hidden":"true"}},[a._v("#")]),a._v(" 情况五：函数用 call、apply或者 bind 调用。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var obj = {\n    x: 10\n}\nfunction foo(){\n    console.log(this);     //{x: 10}\n    console.log(this.x);   //10\n}\nfoo.call(obj);\nfoo.apply(obj);\nfoo.bind(obj)();\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br")])]),n("p",[a._v("当一个函数被 call、apply 或者 bind 调用时，this 的值就取传入的对象的值。")]),a._v(" "),n("p",[a._v("当一个函数被 call、apply 或者 bind 调用时，this 的值就取传入的对象的值。")]),a._v(" "),n("h4",{attrs:{id:"情况六：dom-event-this"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#情况六：dom-event-this","aria-hidden":"true"}},[a._v("#")]),a._v(" 情况六：DOM event this")]),a._v(" "),n("p",[a._v("在一个 HTML DOM 事件处理程序里，this 始终指向这个处理程序所绑定的 HTML DOM 节点：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function Listener(){   \n    document.getElementById('foo').addEventListener('click', this.handleClick);     //这里的 this 指向 Listener 这个对象。不是强调的是这里的 this\n}\nListener.prototype.handleClick = function (event) {\n    console.log(this);    //<div id=\"foo\"></div>\n}\nvar listener = new Listener();\ndocument.getElementById('foo').click();\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br")])]),n("p",[a._v("这个很好理解，就相当于是给函数传参，使 handleClick 运行时上下文改变了，相当于下面这样的代码：")]),a._v(" "),n("p",[a._v("这个很好理解，就相当于是给函数传参，使 handleClick 运行时上下文改变了，相当于下面这样的代码：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var obj = {\n    x: 10,\n    fn: function() {\n        console.log(this);         //Window\n        console.log(this.x);       //undefined\n    }\n};\nfunction foo(fn) {\n    fn();\n} \nfoo(obj.fn);\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br")])]),n("p",[a._v("你也可以用通过 bind 切换上下文:")]),a._v(" "),n("p",[a._v("你也可以用通过 bind 切换上下文:")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function  Listener(){\n    document.getElementById('foo').addEventListener('click',this.handleClick.bind(this));      \n}\nListener.prototype.handleClick = function (event) {\n    console.log(this);    //Listener {}\n}\nvar listener = new Listener();\ndocument.getElementById('foo').click();\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br")])]),n("p",[a._v("前六种情况其实可以总结为： this 指向调用该方法的对象。")]),a._v(" "),n("p",[a._v("前六种情况其实可以总结为： this 指向调用该方法的对象。")]),a._v(" "),n("h4",{attrs:{id:"情况七：箭头函数中的-this"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#情况七：箭头函数中的-this","aria-hidden":"true"}},[a._v("#")]),a._v(" 情况七：箭头函数中的 this")]),a._v(" "),n("p",[a._v("当使用箭头函数的时候，情况就有所不同了：箭头函数内部的 this 是词法作用域，由上下文确定。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var obj = {\n    x: 10,\n    foo: function() {\n        var fn = () => {\n            return () => {\n                return () => {\n                    console.log(this);      //Object {x: 10}\n                    console.log(this.x);    //10\n                }\n            }\n        }\n        fn()()();\n    }\n}\nobj.foo();\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br")])]),n("p",[a._v("现在，箭头函数完全修复了 this 的指向，this 总是指向词法作用域，也就是外层调用者 obj。")]),a._v(" "),n("p",[a._v("现在，箭头函数完全修复了 this 的指向，this 总是指向词法作用域，也就是外层调用者 obj。")]),a._v(" "),n("p",[a._v("如果使用箭头函数，以前的这种 hack 写法：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var self = this;\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("p",[a._v("就不再需要了。")]),a._v(" "),n("p",[a._v("就不再需要了。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var obj = {\n    x: 10,\n    foo: function() {\n        var fn = () => {\n            return () => {\n                return () => {\n                    console.log(this);    // Object {x: 10}\n                    console.log(this.x);  //10\n                }\n            }\n        }\n        fn.bind({x: 14})()()();\n        fn.call({x: 14})()();\n    }\n}\nobj.foo();\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br")])]),n("p",[a._v("由于 this 在箭头函数中已经按照词法作用域绑定了，所以，用 call()或者 apply()调用箭头函数时，无法对 this 进行绑定，即传入的第一个参数被忽略。")]),a._v(" "),n("h2",{attrs:{id:"_5-闭包的实现原理和作用，可以列举几个开发中闭包的实际应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-闭包的实现原理和作用，可以列举几个开发中闭包的实际应用","aria-hidden":"true"}},[a._v("#")]),a._v(" 5.闭包的实现原理和作用，可以列举几个开发中闭包的实际应用")]),a._v(" "),n("p",[a._v("闭包（closure）是javascript的一大难点，也是它的特色。很多高级应用都要依靠闭包来实现。")]),a._v(" "),n("h4",{attrs:{id:"_1、变量作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、变量作用域","aria-hidden":"true"}},[a._v("#")]),a._v(" 1、变量作用域")]),a._v(" "),n("p",[a._v("要理解闭包，首先要理解javascript的特殊的变量作用域。")]),a._v(" "),n("p",[a._v("变量的作用域无非就两种：全局变量和局部变量。")]),a._v(" "),n("p",[a._v("javascript语言的特别之处就在于：函数内部可以直接读取全局变量，但是在函数外部无法读取函数内部的局部变量。")]),a._v(" "),n("p",[a._v("注意点：在函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明的是一个全局变量！")]),a._v(" "),n("h4",{attrs:{id:"_2、如何从外部读取函数内部的局部变量？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、如何从外部读取函数内部的局部变量？","aria-hidden":"true"}},[a._v("#")]),a._v(" 2、如何从外部读取函数内部的局部变量？")]),a._v(" "),n("p",[a._v("出于种种原因，我们有时候需要获取到函数内部的局部变量。但是，上面已经说过了，正常情况下，这是办不到的！只有通过变通的方法才能实现。")]),a._v(" "),n("p",[a._v("那就是在函数内部，再定义一个函数。")]),a._v(" "),n("p",[a._v("function f1(){")]),a._v(" "),n("p",[a._v("var n=999;")]),a._v(" "),n("p",[a._v("function f2(){\n　　　　　　alert(n); // 999\n　　　　}")]),a._v(" "),n("p",[a._v("}")]),a._v(" "),n("p",[a._v("在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。")]),a._v(" "),n("p",[a._v('这就是Javascript语言特有的"链式作用域"结构（chain scope），')]),a._v(" "),n("p",[a._v("子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。")]),a._v(" "),n("p",[a._v("既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！")]),a._v(" "),n("h4",{attrs:{id:"_3、闭包的概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、闭包的概念","aria-hidden":"true"}},[a._v("#")]),a._v(" 3、闭包的概念")]),a._v(" "),n("p",[a._v("上面代码中的f2函数，就是闭包。")]),a._v(" "),n("p",[a._v("各种专业文献的闭包定义都非常抽象，我的理解是: 闭包就是能够读取其他函数内部变量的函数。")]),a._v(" "),n("p",[a._v("由于在javascript中，只有函数内部的子函数才能读取局部变量，所以说，闭包可以简单理解成“定义在一个函数内部的函数“。")]),a._v(" "),n("p",[a._v("所以，在本质上，闭包是将函数内部和函数外部连接起来的桥梁。")]),a._v(" "),n("h4",{attrs:{id:"_4、闭包的用途"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、闭包的用途","aria-hidden":"true"}},[a._v("#")]),a._v(" 4、闭包的用途")]),a._v(" "),n("p",[a._v("闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中，不会在f1调用后被自动清除。")]),a._v(" "),n("p",[a._v("为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。")]),a._v(" "),n("p",[a._v('这段代码中另一个值得注意的地方，就是"nAdd=function(){n+=1}"这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。')]),a._v(" "),n("h4",{attrs:{id:"_5、闭包的优点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5、闭包的优点","aria-hidden":"true"}},[a._v("#")]),a._v(" 5、闭包的优点")]),a._v(" "),n("p",[a._v("（1）逻辑连续，当闭包作为另一个函数调用参数时，避免脱离当前逻辑而单独编写额外逻辑。")]),a._v(" "),n("p",[a._v("（2）方便调用上下文的局部变量。")]),a._v(" "),n("p",[a._v("（3）加强封装性，是第2点的延伸，可以达到对变量的保护作用。")]),a._v(" "),n("h4",{attrs:{id:"_6、使用闭包的注意点（缺点）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6、使用闭包的注意点（缺点）","aria-hidden":"true"}},[a._v("#")]),a._v(" 6、使用闭包的注意点（缺点）")]),a._v(" "),n("p",[a._v("（1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。")]),a._v(" "),n("p",[a._v("（2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。")]),a._v(" "),n("h4",{attrs:{id:"_7、闭包的特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7、闭包的特性","aria-hidden":"true"}},[a._v("#")]),a._v(" 7、闭包的特性")]),a._v(" "),n("p",[a._v("（1）作为函数变量的一个引用。当函数返回时，其处于激活状态。")]),a._v(" "),n("p",[a._v("（2）闭包就是当一个函数返回时，并没有释放资源的栈区。")]),a._v(" "),n("h4",{attrs:{id:"_8、闭包对页面的影响"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8、闭包对页面的影响","aria-hidden":"true"}},[a._v("#")]),a._v(" 8、闭包对页面的影响")]),a._v(" "),n("p",[a._v("通过使用闭包，我们可以做很多事情。比如模拟面向对象的代码风格；更优雅、更简洁的表达出代码；在某些方面提升代码的执行效率。")]),a._v(" "),n("h4",{attrs:{id:"_9、闭包的工作原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9、闭包的工作原理","aria-hidden":"true"}},[a._v("#")]),a._v(" 9、闭包的工作原理")]),a._v(" "),n("p",[a._v("因为闭包只有在被调用时才执行操作，所以它可以被用来定义控制结构。多个函数可以使用同一个环境，这使得他们可以通过改变那个环境相互交流。")]),a._v(" "),n("h4",{attrs:{id:"_10、闭包例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10、闭包例子","aria-hidden":"true"}},[a._v("#")]),a._v(" 10、闭包例子")]),a._v(" "),n("h5",{attrs:{id:"应用场景一：settimeout"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用场景一：settimeout","aria-hidden":"true"}},[a._v("#")]),a._v(" 应用场景一：setTimeout")]),a._v(" "),n("p",[a._v("原生的setTimeout有一个缺陷，你传递的第一个函数不能带参数。即")]),a._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[a._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("parma"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("p",[a._v("这样的语句是不生效的（不过在不同浏览器中有不同的错误，总之都无法达到预期效果）")]),a._v(" "),n("p",[a._v("这时，我们就可以用闭包来实现这个效果了。")]),a._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("param")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("param"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" f "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br")])]),n("h2",{attrs:{id:"_6-理解堆栈溢出和内存泄漏的原理，如何防止"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-理解堆栈溢出和内存泄漏的原理，如何防止","aria-hidden":"true"}},[a._v("#")]),a._v(" 6.理解堆栈溢出和内存泄漏的原理，如何防止")]),a._v(" "),n("h4",{attrs:{id:"_1，内存泄漏（memory-leak）："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1，内存泄漏（memory-leak）：","aria-hidden":"true"}},[a._v("#")]),a._v(" 1，内存泄漏（memory leak）：")]),a._v(" "),n("p",[a._v("是指程序在申请内存后，无法释放已申请的内存空间，导致系统无法及时回收内存并且分配给其他进程使用。通常少次数的内存无法及时回收并不会到程序造成什么影响，但是如果在内存本身就比较少获取多次导致内存无法正常回收时，就会导致内存不够用，最终导致内存溢出。")]),a._v(" "),n("h4",{attrs:{id:"_2、内存溢出-（out-of-memory）："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、内存溢出-（out-of-memory）：","aria-hidden":"true"}},[a._v("#")]),a._v(" 2、内存溢出 （out of memory）：")]),a._v(" "),n("p",[a._v("指程序申请内存时，没有足够的内存供申请者使用，导致数据无法正常存储到内存中。也就是说给你个int类型的存储数据大小的空间，但是却存储一个long类型的数据，这样就会导致内存溢出。")]),a._v(" "),n("h4",{attrs:{id:"内存泄漏：以发生的方式来分类，内存泄漏可以分为4类："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏：以发生的方式来分类，内存泄漏可以分为4类：","aria-hidden":"true"}},[a._v("#")]),a._v(" 内存泄漏：以发生的方式来分类，内存泄漏可以分为4类：")]),a._v(" "),n("p",[a._v("​       1.常发性内存泄漏。发生内存泄漏的代码会被多次执行到，每次执行都会导致一块内存泄漏。\n​       2.偶发性内存泄漏。发生内存泄漏只有在某些特定环境或操作过程下才会发生。常发性和偶发性是相对的。对于特定的环境，偶发性也许变成了常发性的。所以测试环境和测试方法对检测内存泄漏至关重要。\n​       3.一次性内存泄漏。发生内存泄漏的代码只会执行一次，由于算法上的缺陷，导致总会有一块仅且一块内存发生泄漏。比如在类的构造函数中分配内存，在析构函数中却没有释放该内存，所以内存泄漏只会发生一次。\n​       4.隐式内存泄漏。程序在运行中不停的分配内存，但是知道结束时在释放内存。严格的说这里并没有发生内存泄漏，因为最终释放了所有申请的内存。但对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致耗尽系统的所有内存。所以我们称这类内存泄漏为隐式内存泄漏。")]),a._v(" "),n("p",[a._v("内存溢出的原因以及解决办法：\n1.内存中加载的数据量过于庞大，如一次从数据库中取出过多数据；\n2.集合类中有对对象的引用，使用后未清空，是的JVM不能回收；\n3.代码中存在死循环或者循环产生过多重复的对象实体；\n4.使用第三方软件中的BUG；\n5.启动参数内存值设定的过小\n内存溢出的解决方案：\n1.修改JVM启动参数，直接增加内存。（-Xms,-Xms参数一定不要忘记加）\n2.检查错误日志，查看“OutOfMemory”错误前是否有其他异常或错误。\n3.对代码进行走查和分析，找出可能发生内存溢出的位置。\n重点排查以下几点：\n1）检查对数据库查询中，是否有一次获得全部数据的查询。一般来说，如果一次取十万条记录到内存，就可能引起内存溢出。这个问题比较隐蔽，在上线前，数据库中数据较少，不容易出问题，上线后，数据库中数据多了，一次查询就有可能引起内存溢出。对数据库查询尽量采用分页查询。\n2）检查代码是否有死循环或递归调用。\n3）检查是否有大循环重复产生新对象实体。\n4）检查List、Map等集合对象是否有使用后，未清除的问题。List、Map等集合对象会始终存有对对象的引用，使得这些对象不能被GC回收。\n4.使用内存查看工具动态查看内存使用情况。")]),a._v(" "),n("h2",{attrs:{id:"_7-如何处理循环的异步操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-如何处理循环的异步操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 7.如何处理循环的异步操作")]),a._v(" "),n("h3",{attrs:{id:"_7-1-如何确保循环的所有异步操作完成之后执行某个其他操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-如何确保循环的所有异步操作完成之后执行某个其他操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 7.1 如何确保循环的所有异步操作完成之后执行某个其他操作")]),a._v(" "),n("p",[n("strong",[a._v("方法一：设置一个flag，在每个异步操作中对flag进行检测")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("let flag = 0;\nfor(let i = 0; i < len; i++) {\n  flag++;\n  Database.save_method().exec().then((data) => {\n      if(flag === len) {\n            // your code\n      }\n  })\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br")])]),n("p",[n("strong",[a._v("方法二：将所有的循环放在一个promise中，使用then处理")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v(" new Promise(function(resolve){\n      resolve()\n }).then(()=> {\n     for(let i = 0; i < len; i++) {\n           Database.save_method().exec()\n     }\n}).then(() => {\n    // your code\n})\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br")])]),n("h3",{attrs:{id:"_7-2-循环中的下一步操作依赖于前一步的操作，如何解决"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-循环中的下一步操作依赖于前一步的操作，如何解决","aria-hidden":"true"}},[a._v("#")]),a._v(" 7.2 循环中的下一步操作依赖于前一步的操作，如何解决")]),a._v(" "),n("p",[n("strong",[a._v("方法一：使用递归，在异步操作完成之后调用下一次异步操作")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function loop(i){\n  i++;\n  Database.save_method().exec().then(() => {\n      loop(i)\n    })\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br")])]),n("p",[n("strong",[a._v("方法二：使用async和await")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("async function loop() {\n    for(let i = 0; i < len; i++) {\n         await Database.save_method().exec();\n    }\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("h2",{attrs:{id:"_8-理解模块化解决的实际问题，可列举几个模块化方案并理解其中原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-理解模块化解决的实际问题，可列举几个模块化方案并理解其中原理","aria-hidden":"true"}},[a._v("#")]),a._v(" 8.理解模块化解决的实际问题，可列举几个模块化方案并理解其中原理")]),a._v(" "),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/zl13015214442/article/details/96109681",target:"_blank",rel:"noopener noreferrer"}},[a._v("模块化"),n("OutboundLink")],1)])])},[],!1,null,null,null);s.default=t.exports}}]);